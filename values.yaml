# Globale Einstellungen
global:
  namespace: monitoring
  imageRegistry: null
  imagePullSecrets: []

# RBAC (Role-Based Access Control) Konfiguration
rbac:
  create: true
  pspEnabled: true
  pspUseAppArmor: true
  namespaced: false
  extraRoleRules: []
  extraClusterRoleRules: []

# ServiceAccount Konfiguration
serviceAccount:
  create: true
  name: ""
  labels: {}
  automountServiceAccountToken: false

# Replikateneinstellungen
replicas: 1
headlessService: false
automountServiceAccountToken: true

# Autoskalierung
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPU: "60"

# Deployment-Strategie
deploymentStrategy:
  type: RollingUpdate

# Readiness und Liveness Probes
readinessProbe:
  httpGet:
    path: /api/health
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

# Image-Konfiguration
image:
  registry: docker.io
  repository: grafana/grafana
  tag: ""
  sha: ""
  pullPolicy: IfNotPresent

# Sicherheitskontext für Pods und Container
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000

containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Konfiguration für ConfigMaps
createConfigmap: true
extraConfigmapMounts: []
extraEmptyDirMounts: []

# Zusätzliche Labels für Pods und Ressourcen
extraLabels: {}

# Ressourcenbeschränkungen
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Pod-Platzierungsrichtlinien
nodeSelector: {}
tolerations: []
affinity: {}

# Persistenz
persistence:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  finalizers:
    - kubernetes.io/pvc-protection
  lookupVolumeName: true

# Initiales Chown von Daten
initChownData:
  enabled: true
  image:
    registry: docker.io
    repository: library/busybox
    tag: "1.31.1"
    pullPolicy: IfNotPresent
  resources: {}
  securityContext:
    runAsNonRoot: false
    runAsUser: 0
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      add:
        - CHOWN

# Administrator-Credentials
admin:
  existingSecret: grafana-admin-secret
  userKey: admin-user
  passwordKey: admin-password

# Zusätzliche Umgebungsvariablen
env: {}

# Netzwerk-Richtlinien
networkPolicy:
  enabled: true
  ingress: true
  egress:
    enabled: true
    blockDNSResolution: false
    ports:
      - port: 80
        protocol: TCP
      - port: 443
        protocol: TCP
    to: []
  allowExternal: false
  explicitNamespacesSelector:
    matchLabels:
      role: frontend

# Service-Konfiguration
service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations: {}

# ServiceMonitor-Konfiguration
serviceMonitor:
  enabled: false

# Ingress-Konfiguration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  tls:
    - secretName: grafana-tls
      hosts:
        - grafana.example.com

# Sidecar-Konfiguration
sidecar:
  dashboards:
    enabled: true
    folder: /var/lib/grafana/dashboards
  datasources:
    enabled: true

# Plugin-Verwaltung
plugins:
  enabled: true
  labelValue: "approved"

# Grafana.ini-Konfiguration
grafana.ini:
  paths:
    data: /var/lib/grafana/
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  server:
    root_url: https://grafana.example.com
  auth.anonymous:
    enabled: false

# SMTP-Konfiguration
smtp:
  existingSecret: grafana-smtp-secret
  userKey: smtp-user
  passwordKey: smtp-password

# Test Framework Konfiguration
testFramework:
  enabled: false
  hookType: test
  image:
    registry: docker.io
    repository: bats/bats
    tag: "v1.4.1"
  imagePullPolicy: IfNotPresent
  securityContext: {}
  resources: {}

# LDAP Konfiguration
ldap:
  enabled: false
  existingSecret: ""

# Image Renderer Konfiguration
imageRenderer:
  enabled: false
  replicas: 1
  revisionHistoryLimit: 10
  deploymentStrategy:
    type: RollingUpdate
  serviceAccountName: ""
  automountServiceAccountToken: false
  image:
    registry: docker.io
    repository: grafana-image-renderer
    tag: "3.6.1"
    sha: ""
  pullPolicy: IfNotPresent
  securityContext: {}
  containerSecurityContext:
    runAsNonRoot: true
    allowPrivilegeEscalation: false
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  service:
    portName: http
    targetPort: 8081
    annotations: {}
  serviceMonitor:
    enabled: false
  nodeSelector: {}
  affinity: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  extraConfigmapMounts: []
  extraSecretMounts: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  priorityClassName: ""
  env: {}
  envValueFrom: {}
